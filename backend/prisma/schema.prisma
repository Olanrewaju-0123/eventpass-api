generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TempUser {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  emailVerificationToken String @unique
  emailVerificationExpires DateTime
  createdAt         DateTime  @default(now())

  @@map("temp_users")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean  @default(true)
  role      UserRole @default(USER)
  isEmailVerified Boolean @default(false)
  otpCode   String?
  otpExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]
  events   Event[]   @relation("EventCreator")

  @@map("users")
}

model Event {
  id                String      @id @default(cuid())
  title             String
  description       String
  venue             String
  address           String
  startDate         DateTime
  endDate           DateTime
  price             Decimal     @db.Decimal(10, 2)
  capacity          Int
  available         Int
  category          String
  imageUrl          String?
  status            EventStatus @default(ACTIVE)
  createdById       String
  creationReference String?     @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  createdBy User      @relation("EventCreator", fields: [createdById], references: [id])
  bookings  Booking[]

  @@map("events")
}

model Booking {
  id                String        @id @default(cuid())
  userId            String
  eventId           String
  quantity          Int           @default(1)
  totalAmount       Decimal       @db.Decimal(10, 2)
  status            BookingStatus @default(PENDING)
  paymentReference  String?       @unique
  qrCode            String?       @unique
  bookingReference  String        @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  event   Event   @relation(fields: [eventId], references: [id])
  payment Payment?

  @@map("bookings")
}

model Payment {
  id                String        @id @default(cuid())
  bookingId         String        @unique
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("NGN")
  paymentMethod     String
  paymentReference  String        @unique
  paystackReference String?
  status            PaymentStatus @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

enum UserRole {
  USER
  ADMIN
  ORGANIZER
}

enum EventStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  COMPLETED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}
